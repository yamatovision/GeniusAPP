

  システム全体像

  1. プロンプト中央管理システム

  目的：
  - 複数プロジェクト・複数アシスタント間でプロンプトを一元管理
  - バージョン管理と履歴追跡
  - アクセス制御と認証
  - アシスタント別・プロジェクト別の分類

  コンポーネント：
  1. プロンプトリポジトリ
    - JSONベースのメタデータ（カテゴリ、バージョン、用途など）
    - Markdownベースのプロンプト本文
    - バージョン履歴と変更ログ
  2. 管理ポータル
    - プロンプトの作成・編集・管理インターフェース
    - バージョン比較ツール
    - 使用状況分析ダッシュボード
  3. APIレイヤー
    - プロンプト取得エンドポイント
    - 認証・認可
    - 使用統計収集

  2. クライアント連携フロー

  AppGenius → プロンプト中央管理システム連携：
  1. AppGeniusがプロンプト要求（識別子、バージョン指定）
  2. 認証情報を添付してAPIリクエスト
  3. サーバーからプロンプトを取得
  4. ローカルキャッシュ（オプション、オフライン対応用）
  5. ClaudeCodeへURLパラメータとして渡す

  ClaudeCode → プロンプト中央管理システム連携：
  1. ClaudeCodeが起動時にURL指定されたプロンプトにアクセス
  2. 認証トークン検証（URL埋め込みまたはヘッダー）
  3. プロンプト内容を取得して実行
  4. 使用状況をAPIに報告（オプション）

  3. 技術スタック案

  サーバーサイド：
  - Node.js + Express（APIサーバー）
  - MongoDB（プロンプトストレージ）
  - Redis（キャッシュ）
  - JWT認証

  フロントエンド：
  - React + TypeScript（管理ポータル）
  - NextJS（SSR対応）

  インフラ：
  - AWS/Vercel/Netlify（フロントエンド）
  - AWS Lambda/Vercel Functions（API）
  - MongoDB Atlas（データベース）

  4. システム拡張性

  異なるアシスタントタイプへの対応：
  - プロンプトメタデータに「アシスタントタイプ」フィールド
  - アシスタント固有のパラメータをJSONとして格納
  - プロンプトの継承・合成機能

  クライアントフレームワーク：
  - 様々なクライアント（VSCode拡張、CLI、Webアプリ）からの統一ア
  クセス
  - クライアントSDKを提供（JavaScript/TypeScript）

  AppGenius実装計画

  現在の課題点

  1. プロンプト管理が個別プロジェクト内のファイルに依存
  2. プロンプト更新に再デプロイが必要
  3. バージョン管理と履歴追跡が困難
  4. 共通プロンプトの重複管理

  実装フェーズ

  フェーズ1: ClaudeCodeLauncherServiceにURL連携機能を追加

  1. launchClaudeCodeWithPromptUrlメソッドの実装
    - URLからプロンプト取得して実行
    - 基本認証/トークン対応
    - エラーハンドリング強化
  2. プロンプト設定管理クラスの実装
    - 中央リポジトリURLのコンフィグ管理
    - API認証情報の安全な保存
    - プロンプト識別子→URL変換

  フェーズ2: 中央リポジトリ連携サービスの構築

  1. PromptRepositoryServiceクラスの実装
    - プロンプト取得メソッド（識別子指定）
    - バージョン指定オプション
    - 認証処理
    - オフラインモード対応（キャッシュ）
  2. プロンプト使用履歴の追跡機能
    - 使用統計送信メソッド
    - 使用結果のフィードバック機能

  フェーズ3: UI統合

  1. 設定パネルへの統合
    - プロンプト中央管理設定UI
    - リポジトリアクセス設定
    - キャッシュ管理
  2. プロンプト選択UI実装
    - プロンプトカタログ表示
    - バージョン選択
    - プレビュー機能

  技術的考慮事項

  セキュリティ

  1. 認証情報の保護
    - トークンの安全な保存
    - HTTPS通信の強制
    - APIキーのローテーション対応
  2. オフライン対応
    - プロンプトキャッシュの暗号化
    - 有効期限設定
    - キャッシュクリア機能

  パフォーマンス

  1. プロンプト取得の最適化
    - 頻出プロンプトのキャッシング
    - 差分更新
    - 圧縮転送
  2. 起動時間短縮
    - バックグラウンド事前取得
    - ウォームキャッシュ

  次のステップ

  1. 設計文書の詳細化
    - APIエンドポイント設計
    - データモデル詳細設計
    - セキュリティプロトコル設計
  2. プロトタイプ実装
    - launchClaudeCodeWithPromptUrlメソッド実装
    - 簡易プロンプトリポジトリサーバー構築
    - E2Eテスト
  3. プロンプト移行計画
    - 既存プロンプトの整理・分類
    - メタデータ付与
    - リポジトリへの移行

  このアプローチにより、AppGeniusは単なるVSCode拡張から、統合AI
  アシスタントプラットフォームへと進化することができます。また、
  プロンプト中央管理によってアシスタントの一貫性と品質向上にも寄
  与します。

> VSCODEの利用自体も認証かけることできますか？今のところ認証がな
  いのでいずれこの認証で管理して、利用できるユーザーを制御。アク
  セス不能に強制的にする。みたいなことやClaudeCodeにアクセスでき
  なくさせる。みたいな認証システムの実装が必要になると思っていま
  した。

⏺ VSCode拡張の認証システムを実装することは可能です。以下のような
  認証・アクセス制御システムを構築できます。

  VSCode拡張認証システムの全体構想

  1. 認証フロー

  初回起動時認証:
  1. 拡張機能初回起動時にユーザー認証を要求
  2. ログイン画面をWebViewパネルで表示
  3. ユーザーが認証情報を入力（メール/パスワードまたはOAuth）
  4. 認証サーバーに認証リクエスト送信
  5. トークン取得・安全な保存
  6. 以降の操作はトークンで認証

  継続的認証チェック:
  1. 拡張機能起動時にトークン有効性を検証
  2. 定期的なトークン再検証（例：1時間ごと）
  3. トークン失効時は再認証要求
  4. トークンリフレッシュメカニズム

  2. アクセス制御レベル

  拡張機能レベル:
  - 拡張機能の起動自体を認証で制御
  - 未認証時は最小限の機能のみ利用可能
  - 認証失敗時は拡張機能を無効化

  機能レベル:
  - 各機能（チャット、AI実装など）ごとにアクセス権限を設定
  - ユーザーごとに利用可能機能を制限
  - 支払いプランや権限レベルに応じた機能制限

  ClaudeCodeアクセス制御:
  - ClaudeCodeの起動権限を認証により制御
  - APIキーやシークレットを認証後のみ提供
  - 認証サーバー経由でClaudeCodeへのアクセスを制御

  3. 実装コンポーネント

  認証サービスクラス:
  class AuthenticationService {
    private static instance: AuthenticationService;
    private tokens: { accessToken: string; refreshToken: string
  } | null = null;
    private tokenExpiry: Date | null = null;
    private authState: 'authenticated' | 'unauthenticated' |
  'pending' = 'unauthenticated';
    private authStateListeners: ((state: string) => void)[] =
  [];

    // シングルトンインスタンス取得
    public static getInstance(): AuthenticationService {
      if (!AuthenticationService.instance) {
        AuthenticationService.instance = new
  AuthenticationService();
      }
      return AuthenticationService.instance;
    }

    // 初期認証状態チェック
    public async initialize(): Promise<boolean> {
      // トークンの読み込みと検証
      const savedTokens = await this.loadTokens();
      if (savedTokens) {
        const isValid = await
  this.validateToken(savedTokens.accessToken);
        if (isValid) {
          this.setAuthenticated(savedTokens);
          return true;
        }
        // リフレッシュトークンでの再認証
        return this.refreshAuthentication();
      }
      return false;
    }

    // 認証プロセス
    public async authenticate(credentials: { email: string;
  password: string }): Promise<boolean> {
      try {
        // 認証サーバーへのリクエスト
        const response = await
  fetch('https://auth.yourservice.com/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(credentials)
        });

        if (!response.ok) {
          throw new Error('認証に失敗しました');
        }

        const tokens = await response.json();
        this.setAuthenticated(tokens);
        await this.saveTokens(tokens);
        return true;
      } catch (error) {
        Logger.error('認証エラー', error as Error);
        this.setUnauthenticated();
        return false;
      }
    }

    // その他必要なメソッド...
  }

  アクセス制御マネージャー:
  class AccessControlManager {
    private static instance: AccessControlManager;
    private permissions: Map<string, boolean> = new Map();
    private authService: AuthenticationService;

    private constructor() {
      this.authService = AuthenticationService.getInstance();
      this.authService.addAuthStateListener(this.handleAuthState
  Change.bind(this));
    }

    // シングルトンインスタンス取得
    public static getInstance(): AccessControlManager {
      if (!AccessControlManager.instance) {
        AccessControlManager.instance = new
  AccessControlManager();
      }
      return AccessControlManager.instance;
    }

    // 機能へのアクセス制御チェック
    public canAccess(featureId: string): boolean {
      if (this.authService.getAuthState() !== 'authenticated') {
        return false;
      }

      return this.permissions.get(featureId) ?? false;
    }

    // 権限更新処理
    private async handleAuthStateChange(state: string):
  Promise<void> {
      if (state === 'authenticated') {
        await this.fetchUserPermissions();
      } else {
        this.clearPermissions();
      }
    }

    // ユーザー権限の取得
    private async fetchUserPermissions(): Promise<void> {
      try {
        const response = await
  fetch('https://auth.yourservice.com/permissions', {
          headers: {
            'Authorization': `Bearer 
  ${this.authService.getAccessToken()}`
          }
        });

        if (!response.ok) {
          throw new Error('権限情報の取得に失敗しました');
        }

        const permissionsData = await response.json();
        this.updatePermissions(permissionsData);
      } catch (error) {
        Logger.error('権限取得エラー', error as Error);
      }
    }

    // その他必要なメソッド...
  }

  認証UI:
  class AuthenticationPanel {
    private panel: vscode.WebviewPanel | undefined;
    private authService: AuthenticationService;

    constructor() {
      this.authService = AuthenticationService.getInstance();
    }

    public show(): void {
      // Webviewパネルの作成
      this.panel = vscode.window.createWebviewPanel(
        'appGeniusAuth',
        'AppGenius 認証',
        vscode.ViewColumn.One,
        {
          enableScripts: true,
          retainContextWhenHidden: true
        }
      );

      // HTMLコンテンツの設定
      this.panel.webview.html = this.getAuthHtml();

      // メッセージハンドラー
      this.panel.webview.onDidReceiveMessage(async (message) =>
  {
        if (message.command === 'login') {
          const success = await
  this.authService.authenticate(message.credentials);
          this.panel?.webview.postMessage({ command:
  'loginResult', success });

          if (success) {
            this.panel?.dispose();
          }
        }
      });
    }

    private getAuthHtml(): string {
      // ログインフォームのHTML
      return `<!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, 
  initial-scale=1.0">
          <title>AppGenius 認証</title>
          <style>
            /* スタイル定義 */
          </style>
        </head>
        <body>
          <div class="container">
            <h1>AppGenius 認証</h1>
            <form id="loginForm">
              <div class="form-group">
                <label for="email">メールアドレス</label>
                <input type="email" id="email" required>
              </div>
              <div class="form-group">
                <label for="password">パスワード</label>
                <input type="password" id="password" required>
              </div>
              <button type="submit">ログイン</button>
            </form>
          </div>
          <script>
            // フォーム送信ハンドリング
            document.getElementById('loginForm').addEventListene
  r('submit', (e) => {
              e.preventDefault();
              const email = 
  document.getElementById('email').value;
              const password = 
  document.getElementById('password').value;
              
              // VSCodeに認証情報を送信
              vscode.postMessage({
                command: 'login',
                credentials: { email, password }
              });
            });
            
            // VSCodeからのメッセージ受信
            window.addEventListener('message', (event) => {
              const message = event.data;
              if (message.command === 'loginResult' && 
  !message.success) {
                
  alert('認証に失敗しました。認証情報を確認してください。');
              }
            });
          </script>
        </body>
        </html>`;
    }
  }

  4. ClaudeCode認証連携

  ClaudeCodeへのアクセスも認証で制御する方法:

  // ClaudeCodeLauncherService.tsの拡張
  public async launchClaudeCodeWithPromptUrl(
    projectPath: string,
    promptUrl: string,
    options?: { title?: string, additionalParams?: string }
  ): Promise<boolean> {
    try {
      // 認証チェック
      const authService = AuthenticationService.getInstance();
      const accessManager = AccessControlManager.getInstance();

      if (authService.getAuthState() !== 'authenticated') {
        // 認証されていない場合はログイン要求
        vscode.window.showWarningMessage(
          'AppGeniusの使用には認証が必要です',
          'ログイン'
        ).then(selection => {
          if (selection === 'ログイン') {
            new AuthenticationPanel().show();
          }
        });
        return false;
      }

      // Claude実行権限チェック
      if (!accessManager.canAccess('claudeCode')) {
        vscode.window.showErrorMessage(
          'ClaudeCodeへのアクセス権限がありません。アクセスレベ
  ルをアップグレードしてください。'
        );
        return false;
      }

      // 認証トークンをURLに追加
      const token = authService.getAccessToken();
      const urlWithAuth = new URL(promptUrl);
      urlWithAuth.searchParams.append('token', token);

      // 以降は既存のコード...
      // ...
    } catch (error) {
      // エラーハンドリング
    }
  }

  5. セキュリティ考慮事項

  1. トークン保存:
    - トークンをVSCode SecretStorage APIで暗号化保存
    - ワークスペースのみで有効なスコープ設定
  2. 通信セキュリティ:
    - すべての通信をHTTPS経由で実施
    - APIリクエストの署名検証
  3. オフライン安全策:
    - オフライン使用時の制限機能
    - 一時的なアクセス許可と期限設定
  4. アカウント管理:
    - パスワードリセット機能
    - 二要素認証オプション
    - セッション管理とリモート取り消し

  6. 実装計画

  フェーズ1: 基本認証システム

  1. AuthenticationService実装
  2. 初回起動時認証フロー
  3. トークン保存・検証

  フェーズ2: 認証サーバー連携

  1. 認証APIエンドポイント実装
  2. ユーザーDB設計
  3. 認証サーバーデプロイ

  フェーズ3: アクセス制御

  1. AccessControlManager実装
  2. 機能ごとのアクセス制御
  3. プラン管理とアップグレードパス

  フェーズ4: ClaudeCode認証連携

  1. ClaudeCodeへのトークン渡し
  2. 認証サーバーとClaudeCodeの連携
  3. 不正アクセス検出と対応

  この認証システムによって、AppGeniusのユーザー管理と課金モデル
  の基盤が整い、商用展開への道が開けます。また、ClaudeCodeへのア
  クセス制御により、APIキーの不正利用防止にもつながります。